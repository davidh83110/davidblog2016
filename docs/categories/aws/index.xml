<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on David&#39;s Blog</title>
    <link>/categories/aws/</link>
    <description>Recent content in AWS on David&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Jun 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Solved - AWS LoadBalancer Controller Cannot Gracefully Rolling Update</title>
      <link>/blog/2021-06-24-eks-awslbcontroller-gracefully-rolling-update/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/2021-06-24-eks-awslbcontroller-gracefully-rolling-update/</guid>
      <description>Introduction  我們都知道 AWS LoadBalancer Controller 有個很嚴重的問題，就是當我們 trigger 一個 release 的時候，一般情況下 Pod 會被 Terminated 而且 draining from ALB Target Group。這就會導致 更新不平滑，因為新的 Pod 還沒 ready 也還沒 healthy(在 Target Group)，流量就會進來，那當然就會出現 502。
白話來說，就是更新不平滑，導致的原因就是 ALB Target Group 的狀態跟 Pod 並沒有連動。
本文適用以下情況：
 在 Target Group 裡永遠只有一個 Pod Rollout Strategy 是一次把所有 Pod 全部替換 Rolling Update 的速度太快 或是任何 Target Group 裡可能會暫時沒有 Healthy Pods 的情況  
Issue  我們來看看時間軸以及 ALB Target Group 和 Kubernetes 如何處理的。
明顯的，問題就是 Pod-a1 在 Pod-a2 ready 前就已經開始 draining，如果 Pod 的數量多並且 rolling update 的速度比較慢或許不容易察覺，但是當 Pod 的數量只有 1 或是 rolling update 是一次把所有 Pods 全部替換掉的時候就很明顯了，ALB 就直接給你個 502。</description>
    </item>
    
    <item>
      <title>EKS Best Practices - Security</title>
      <link>/blog/2020-05-26-eks-best-practices-security/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020-05-26-eks-best-practices-security/</guid>
      <description>Introduction  不久前 AWS 出了一本 EKS Best Practices (Mkdocs)，目前只有釋出 Security 的部分，但從 Repository 可以看到未來應該還會有 Cost optimization / Operation / Performance / Reliability 的部分。 由於目前只有 Security 的部分，也就花了幾天把它看完，發現這真的個好東西，那種感覺差不多是你就跟著他跟你說的實踐去做，初學者也不會太偏離軌道。
根據 AWS 自己說的 AWS 會負責雲的安全 (security of the cloud)，但使用者要負責自己在雲上的安全 (security in the cloud)。 所以我們就來看看我們需要做到哪些事才可以 盡量 安全的使用 EKS。由於這份文件說長不長，說短不短，看完還是要一點時間，尤其又是英文，所以我看完後整理了一下重點跟翻譯可以給自己當成筆記。
覺得自己看的滿仔細的，還提交了 5 個 PR，想說以此做個筆記以便日後回來看，寫下來的筆記整理永遠是很好的複習跟加深記憶的方式。
這裡附上原 Repository 跟原文 Mkdocs Site。
Github - https://github.com/aws/aws-eks-best-practices
Mkdocs Site - https://aws.github.io/aws-eks-best-practices/

目錄  以下內容會分成幾個部分來講，盡量 Follow 原文的結構。
 EKS &amp;amp; IAM EKS IAM Role for ServiceAccounts (IRSA) EKS Pod Security EKS Tenant Security EKS Detective Control EKS Network Security EKS Security Groups EKS Runtime Security EKS Infrastructure(Worker Node) Security</description>
    </item>
    
    <item>
      <title>EKS External-DNS Cross Account Route53 Setup</title>
      <link>/aws/kubernetes/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/terraform/2020/05/14/eks-external-dns.html</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/aws/kubernetes/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/terraform/2020/05/14/eks-external-dns.html</guid>
      <description>External-DNS 是一款可以讓我們建立 ALB Ingress 的時候，自動將 ALB DNS 在 Route53 建立一組 DNS 的實用套件。
當然他也支援在 GCP/Azure 上面建立，只是這邊就只介紹 AWS 上如何做設定，以及如果 Route53 在另一個 Account 的話要怎麼做。 在 EKS 1.14 以上使用了 OIDC ，所以如果跨帳號就會需要使用 OIDC 做授權。
External-DNS 官方介紹：
 Inspired by Kubernetes DNS, Kubernetes&amp;rsquo; cluster-internal DNS server, ExternalDNS makes Kubernetes resources discoverable via public DNS servers. Like KubeDNS, it retrieves a list of resources (Services, Ingresses, etc.) from the Kubernetes API to determine a desired list of DNS records.</description>
    </item>
    
    <item>
      <title>EKS Building &amp; Troubleshooting</title>
      <link>/aws/kubernetes/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/terraform/2020/03/30/eks-install.html</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/aws/kubernetes/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/terraform/2020/03/30/eks-install.html</guid>
      <description>This is the full map of EKS and we&amp;rsquo;ll go through how to install EKS and plugins in this post, as well as the troubles I got. Let&amp;rsquo;s go!
Quick Start an EKS with ADD-ONs  git clone https://github.com/davidh83110/eks-quickstart cd terraform &amp;amp;&amp;amp; make plan &amp;amp;&amp;amp; make apply cd ansible-playbooks ansible-playbook ./ You will get an EKS cluster and Node Group, also has metrics-server / k8s-dashboard / ALB-Ingress controller / Cluster-Autoscaler (CA) / Prometheus / Grafana / Weave.</description>
    </item>
    
    <item>
      <title>Cloud-Native LOG 儲存以及分析方案</title>
      <link>/aws/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/2020/02/15/cloud-native-log-solution.html</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/aws/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/2020/02/15/cloud-native-log-solution.html</guid>
      <description>隨著 Microservices 的蓬勃發展，從以前的一體式架構慢慢演變成了現今的動輒數十數百個服務同時在線，Log 的量也以很可怕的速度成長中，面對巨量的 Log ，要存在哪裡、要怎麼去利用這些資料反而是現今架構上的難題。
利用這些 Log 我們可以輕易的去提早發現服務的異常，也可以拿來做分析，產出更珍貴的資源，像是 BI。 最重要的是可以協助 Debug, 除錯, 還有做 Audit.
 我認為 Logging 就是一件很容易被大家認為不重要的事，但他其實很重要，也是很珍貴的資產，絕對值得我們花時間好好處理以及規劃。
 
格式問題  一般來說都會是 JSON, 不管你要存存什麼格式 統一就好 然後避免直接存 Raw Data。
Log Level 也是要注意，盡量把 CRITICAL / ERROR / WARNING / INFO &amp;hellip;這些分出來。

要存在哪裡  這是一個很難的問題，市面是常見的方案有以下幾種
A. Elasticsearch + Fluentd(Logstash) + Kibana (ELK) B. CloudwatchLogs C. S3 D. Database E. Splunk F. Graylog 
A. ELK 這套適合成長中的組織，有足夠人力也有足夠彈性可以去維護。
但是他是 Near-Real-Time 的服務（畢竟中間還要經過 Fluentd），所以會有一定的延遲。</description>
    </item>
    
    <item>
      <title>AWS Solutions Architect Associate (SAA) - [PASSED] 心得以及攻略</title>
      <link>/aws/2019/12/05/aws-saa-pass.html</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/aws/2019/12/05/aws-saa-pass.html</guid>
      <description>AWS Solutions Architect Associate (SAA) - [PASSED]  經過了幾週的準備，終於通過了SAA的考試 (82% PASS)。以此紀錄以及分享一下準備的過程。
With a few weeks of preparation, I passed the AWS SAA certificate exam with an 82% score. And I will step by step to introduce how I prepare it.

事前準備 Preparation  先自我介紹，我從2016年開始接觸AWS，有使用過的服務有：
The first time I use AWS was in 2016, those services below are I&amp;rsquo;ve been studying:
 EC2 (EBS, EC2 RI), LB, ASG VPC (subnet, Route Table, Peering connection) ECS / OpsWorks / Beanstalk S3 Lambda Cloudwatch / CloudwatchLogs  其餘沒有列出來的服務都只有接觸過並沒有很深入了解。</description>
    </item>
    
    <item>
      <title>20180329 Serverless event NOTE</title>
      <link>/%E6%8A%80%E8%A1%93%E7%B0%A1%E4%BB%8B/aws/serverless/2018/04/21/srverless.html</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/%E6%8A%80%E8%A1%93%E7%B0%A1%E4%BB%8B/aws/serverless/2018/04/21/srverless.html</guid>
      <description>Serverless for Monitoring how to debug on serverless ? how&amp;rsquo;s the security for using serverless ? hoe&amp;rsquo;s the latency ? how&amp;rsquo;s the cost ? &amp;ldquo;Less is More&amp;rdquo; we have to focus on other things not just only code when using serverless

Structure is Changing During the application structure is changing to CaaS, we have to reduce the instances which are not for application layer as possible as we can, to avoid launching more and more instances which unnecessary to save cost.</description>
    </item>
    
    <item>
      <title>AWS EC2 Container Service (ECS) Note</title>
      <link>/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/%E6%8A%80%E8%A1%93%E7%B0%A1%E4%BB%8B/aws/2017/10/27/aws-ecs.html</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%BD%AE/%E6%8A%80%E8%A1%93%E7%B0%A1%E4%BB%8B/aws/2017/10/27/aws-ecs.html</guid>
      <description>AWS EC2 Container Service (ECS) Note
There are three way to create a cluster and instance, via ecs-cli and aws cli as well as AWS Console. And ecs-cli via CloudFormation Stack to create, so I will use aws cli to create it.
First, We create a Back-End Service (Use Flask) Step1. Create a Cluster for Back-End Service
# aws ecs create-cluster --cluster-name $CLUSTER_FLASK Step2. Create an instance for Cluster a. Create user-data.</description>
    </item>
    
  </channel>
</rss>